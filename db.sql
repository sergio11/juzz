DROP DATABASE IF EXISTS juzz;
CREATE DATABASE juzz;

use juzz;


CREATE TABLE IF NOT EXISTS politica_comentarios(
	id      TINYINT(1) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	name    VARCHAR(60) NOT NULL
)ENGINE=INNODB CHARSET=LATIN1 COMMENT="Tabla de Perfiles Sociales";

CREATE TABLE IF NOT EXISTS paises (
	id 		INT(11) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	iso 	CHAR(2) DEFAULT NULL,
	nombre 	VARCHAR(80) DEFAULT NULL
) ENGINE=INNODB CHARSET=latin1 COMMENT="Tabla de Paises";

CREATE TABLE IF NOT EXISTS usuarios(
	id 			BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	nombre		VARCHAR(30) NOT NULL,
	genero 		CHAR(1) DEFAULT 'H' NOT NULL,
	descripcion MEDIUMTEXT,
	nick		VARCHAR(30) NOT NULL,
		CONSTRAINT USU_NICK_UK UNIQUE(nick),
	ape1 		VARCHAR(30) NOT NULL,
	ape2 		VARCHAR(30) NOT NULL,
	email       VARCHAR(90) NOT NULL,
            CONSTRAINT USU_EMA_UK UNIQUE(email),
    password    CHAR(60) NOT NULL,
    activo 		BOOLEAN DEFAULT FALSE NOT NULL,
    ingreso		DATE NOT NULL,
    politica_comentarios TINYINT UNSIGNED DEFAULT 1 NOT NULL,
    	CONSTRAINT USU_POLI_FK FOREIGN KEY(politica_comentarios)
    		REFERENCES politica_comentarios(id),
    origen      INT(11) UNSIGNED NOT NULL,
    	CONSTRAINT USU_ORI_FK FOREIGN KEY(origen)
    		REFERENCES paises(id),
    avatar 	VARCHAR(255) DEFAULT NULL,
    	CONSTRAINT US_AVA_UK UNIQUE(avatar),
    updated_avatar_at	DATETIME,
   	profile_bg  VARCHAR(255) DEFAULT NULL,
    	CONSTRAINT US_PRO_UK UNIQUE(profile_bg),
    updated_profilebg_at DATETIME,
    confirmation_token CHAR(43),
    	CONSTRAINT US_TOK_UK UNIQUE(confirmation_token)
)ENGINE=INNODB CHARSET=LATIN1 COMMENT="Tabla de Usuario";

/*ALTER TABLE USUARIOS MODIFY COLUMN profile_bg BIGINT UNSIGNED DEFAULT NULL;*/

CREATE TABLE IF NOT EXISTS perfiles_sociales(
	id  	BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	url     VARCHAR(100) NOT NULL,
	type    ENUM('FACEBOOK','TWITTER','YOUTUBE') NOT NULL,
	usuario BIGINT UNSIGNED NOT NULL,
		CONSTRAINT PER_FK FOREIGN KEY(usuario)
			REFERENCES usuarios(id)
				ON DELETE CASCADE
				ON UPDATE CASCADE
)ENGINE=INNODB CHARSET=LATIN1 COMMENT="Tabla de Perfiles Sociales";

CREATE TABLE IF NOT EXISTS canales(
	id 			BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	nombre		VARCHAR(60) NOT NULL,
		CONSTRAINT CAN_NOM_UK UNIQUE(nombre),
	descripcion	MEDIUMTEXT,
	creacion 	DATE NOT NULL,
	usuario_id 	BIGINT UNSIGNED NOT NULL,
		CONSTRAINT CAN_FK FOREIGN KEY(usuario_id)
			REFERENCES usuarios(id)
				ON DELETE CASCADE
				ON UPDATE CASCADE
)ENGINE=INNODB CHARSET=LATIN1 COMMENT="Tabla de Canales";

CREATE TABLE IF NOT EXISTS programas(
	id 			BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	nombre		VARCHAR(60) NOT NULL,
	descripcion	MEDIUMTEXT,
	creacion 	DATE NOT NULL,
	canal_id 		BIGINT UNSIGNED NOT NULL,
		CONSTRAINT PRO_FK FOREIGN KEY(canal_id)
			REFERENCES canales(id)
				ON DELETE CASCADE
				ON UPDATE CASCADE
)ENGINE=INNODB CHARSET=LATIN1 COMMENT="Tabla de Programas";

CREATE TABLE IF NOT EXISTS seguidores(
	seguido_id  BIGINT UNSIGNED,
	 CONSTRAINT SEG_SEGUIDO_FK FOREIGN KEY(seguido_id) REFERENCES usuarios(id)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	seguidor_id BIGINT UNSIGNED,
	 CONSTRAINT SEG_SEGUIDOR_FK FOREIGN KEY(seguidor_id) REFERENCES usuarios(id)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	CONSTRAINT SEG_PK PRIMARY KEY(seguido_id,seguidor_id),
	fecha DATE NOT NULL,
	bloqueado	BOOLEAN DEFAULT FALSE NOT NULL
)ENGINE=INNODB CHARSET=LATIN1 COMMENT="Tabla de Seguidores";

CREATE TABLE IF NOT EXISTS subscripciones_programas(
	usuario_id BIGINT UNSIGNED,
	 CONSTRAINT SUBS_USU_FK FOREIGN KEY(usuario_id) REFERENCES usuarios(id)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	programa_id BIGINT UNSIGNED,
	 CONSTRAINT SUBS_PRO_FK FOREIGN KEY(programa_id) REFERENCES programas(id)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	CONSTRAINT SUBS_PK PRIMARY KEY(usuario_id,programa_id),
	fecha DATE NOT NULL,
	aviso BOOLEAN DEFAULT FALSE NOT NULL
)ENGINE=INNODB CHARSET=LATIN1 COMMENT="Tabla de Subscripciones";

CREATE TABLE IF NOT EXISTS likes_programas(
	subscriptor_id BIGINT UNSIGNED,
	 CONSTRAINT LIK_USU_FK FOREIGN KEY(subscriptor_id) REFERENCES usuarios(id)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	subscripcion_id BIGINT UNSIGNED,
	 CONSTRAINT LIK_PRO_FK FOREIGN KEY(subscripcion_id) REFERENCES programas(id)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	fecha DATE NOT NULL,
	CONSTRAINT LIKPRO_PK PRIMARY KEY(subscriptor_id,subscripcion_id)
)ENGINE=INNODB CHARSET=LATIN1 COMMENT="Tabla de LIKES";

CREATE TABLE IF NOT EXISTS terminos(
	id 		BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	nombre	VARCHAR(30) NOT NULL,
		CONSTRAINT TER_UK UNIQUE(nombre),
	slug	VARCHAR(30) NOT NULL,
		CONSTRAINT SLU_UK UNIQUE(nombre),
	descripcion	MEDIUMTEXT
)ENGINE=INNODB CHARSET=LATIN1 COMMENT="Tabla de Terminos";

CREATE TABLE IF NOT EXISTS categorias(
	termino_id 		BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	CONSTRAINT CAT_TER_FK FOREIGN KEY(termino_id)
			REFERENCES terminos(id)
				ON DELETE CASCADE
				ON UPDATE CASCADE,
	parent_id 	BIGINT UNSIGNED,
	 CONSTRAINT CAT_FK FOREIGN KEY(parent_id)
			REFERENCES categorias(termino_id)
				ON DELETE CASCADE
				ON UPDATE CASCADE
)ENGINE=INNODB CHARSET=LATIN1 COMMENT="Tabla de Categorias";

CREATE TABLE IF NOT EXISTS etiquetas(
	termino_id 		BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
		CONSTRAINT ETQ_TER_FK FOREIGN KEY(termino_id)
			REFERENCES terminos(id)
				ON DELETE CASCADE
				ON UPDATE CASCADE,
	count	INTEGER	UNSIGNED DEFAULT 0 NOT NULL
)ENGINE=INNODB CHARSET=LATIN1 COMMENT="Tabla de Categorias";


CREATE TABLE IF NOT EXISTS categorias_usuarios(
	usuario_id BIGINT UNSIGNED,
	 CONSTRAINT CATUSU_USU_FK FOREIGN KEY(usuario_id)
	 	REFERENCES usuarios(id)
			ON DELETE CASCADE
			ON UPDATE CASCADE,
	categoria_id 	BIGINT UNSIGNED,
	 CONSTRAINT CATUSU_CAT_FK FOREIGN KEY(categoria_id)
	 	REFERENCES categorias(termino_id)
			ON DELETE CASCADE
			ON UPDATE CASCADE,
	CONSTRAINT CATUSU_PK PRIMARY KEY(usuario_id,categoria_id),
	orden	TINYINT UNSIGNED NOT NULL
)ENGINE=INNODB CHARSET=LATIN1 COMMENT="Tabla de Categorias usuarios";

CREATE TABLE IF NOT EXISTS generos(
	id 		BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	nombre	VARCHAR(30) NOT NULL,
		CONSTRAINT GEN_NOM_UK UNIQUE(nombre),
	descripcion MEDIUMTEXT
)ENGINE=INNODB CHARSET=LATIN1 COMMENT="Tabla de Generos";

CREATE TABLE IF NOT EXISTS episodios(
	id 		BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	titulo	VARCHAR(30) NOT NULL,
	file	VARCHAR(60) NOT NULL,
		CONSTRAINT EPI_FIL_UK UNIQUE(file),
	descripcion MEDIUMTEXT,
	poster	VARCHAR(60) NOT NULL,
	duracion TIME NOT NULL,
	categoria_id BIGINT UNSIGNED NOT NULL,
		CONSTRAINT EPI_CAT_FK FOREIGN KEY(categoria_id)
			REFERENCES categorias(termino_id)
				ON DELETE CASCADE
				ON UPDATE CASCADE,
	genero_id  BIGINT UNSIGNED NOT NULL,
		CONSTRAINT EPI_GEN_FK FOREIGN KEY(genero_id)
			REFERENCES generos(id)
				ON DELETE CASCADE
				ON UPDATE CASCADE,
	programa_id BIGINT UNSIGNED NOT NULL,
		CONSTRAINT EPI_PRO_FK FOREIGN KEY(programa_id)
			REFERENCES programas(id)
				ON DELETE CASCADE
				ON UPDATE CASCADE
)ENGINE=INNODB CHARSET=LATIN1 COMMENT="Tabla de Episodios";

CREATE TABLE IF NOT EXISTS comentarios(
	id 			BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	fecha 		DATETIME NOT NULL,
	valido 		BOOLEAN NOT NULL DEFAULT TRUE,
	contenido	MEDIUMTEXT NOT NULL,
	parent_id		BIGINT UNSIGNED,
	 CONSTRAINT COM_PAR_FK FOREIGN KEY(parent_id)
			REFERENCES comentarios(id)
				ON DELETE CASCADE
				ON UPDATE CASCADE,
	propietario_id	BIGINT UNSIGNED NOT NULL,
			CONSTRAINT COM_PRO_FK FOREIGN KEY(propietario_id)
				REFERENCES usuarios(id)
					ON DELETE CASCADE
					ON UPDATE CASCADE,
	target	BIGINT UNSIGNED NOT NULL
)ENGINE=INNODB CHARSET=LATIN1 COMMENT='Tabla de Comentarios';


CREATE TABLE IF NOT EXISTS comments_assess(
	user BIGINT UNSIGNED,
	 CONSTRAINT ASS_USU_FK FOREIGN KEY(user) REFERENCES usuarios(id)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	comment BIGINT UNSIGNED,
	 CONSTRAINT ASS_COM_FK FOREIGN KEY(comment) REFERENCES comentarios(id)
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	assess TINYINT(1) UNSIGNED DEFAULT 0 NOT NULL, 
	datetime DATETIME NOT NULL,
	CONSTRAINT ASSCOM_PK PRIMARY KEY(user,comment)
)ENGINE=INNODB CHARSET=LATIN1 COMMENT="Tabla de LIKES Comentarios";

/*ALTER TABLE COMENTARIOS MODIFY fecha DATETIME;*/

/* Implemetar disparador para que el target y el propietario no sean el mismo*/

/* Implementar disparador para que cuando se borre una tupla que sea objetivo de mucho comentarios, se borre dichos comentarios*/

CREATE TABLE IF NOT EXISTS notificaciones(
	id 			BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	fecha		DATETIME NOT NULL,
	type		ENUM('NEW_COMMENT','REPLY_TO_COMMENT') NOT NULL,
	vista		BOOLEAN NOT NULL DEFAULT FALSE,
	target_id   BIGINT UNSIGNED NOT NULL,
		CONSTRAINT TAR_FK FOREIGN KEY(target_id)
			REFERENCES usuarios(id)
				ON DELETE CASCADE
				ON UPDATE CASCADE,
	source      BIGINT UNSIGNED NOT NULL,
		CONSTRAINT SOUR_FK FOREIGN KEY(source)
			REFERENCES usuarios(id)
				ON DELETE CASCADE
				ON UPDATE CASCADE,
	objetive	BIGINT UNSIGNED NOT NULL		
)ENGINE=INNODB CHARSET=LATIN1 COMMENT='Tabla de Notificaciones';

/* Trabajar m√°s tema de las actividades*/

CREATE TABLE IF NOT EXISTS actividades_usuarios(
	id 			BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	fecha       DATETIME NOT NULL,
	tipo		ENUM('PRUEBA') NOT NULL,
	usuario_id      BIGINT UNSIGNED NOT NULL,
		CONSTRAINT ACTU_FK FOREIGN KEY(usuario_id)
			REFERENCES usuarios(id)
				ON DELETE CASCADE
				ON UPDATE CASCADE
)ENGINE=INNODB CHARSET=LATIN1 COMMENT='Tabla de actividades  de los usuarios';

CREATE TABLE IF NOT EXISTS actividades_canales(
	id 			BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	fecha       DATETIME NOT NULL,
	tipo		ENUM('PRUEBA') NOT NULL,
	usuario_id      BIGINT UNSIGNED NOT NULL,
		CONSTRAINT ACTC_FK FOREIGN KEY(usuario_id)
			REFERENCES usuarios(id)
				ON DELETE CASCADE
				ON UPDATE CASCADE
)ENGINE=INNODB CHARSET=LATIN1 COMMENT='Tabla de actividades  de los usuarios';

/*Disparadores*/

DELIMITER /

CREATE TRIGGER comentarios_ai_trigger
AFTER INSERT ON comentarios FOR EACH ROW
BEGIN

	DECLARE fecha DATETIME DEFAULT CURTIME();
	DECLARE responded BIGINT(20) UNSIGNED;

	INSERT INTO notificaciones (fecha,type,target_id,source,objetive)
	VALUES(fecha,'NEW_COMMENT',NEW.target,NEW.propietario_id,NEW.id);

	IF NEW.parent_id IS NOT NULL THEN

		SELECT propietario_id INTO responded 
		FROM comentarios 
		WHERE id = NEW.parent_id;

		INSERT INTO notificaciones (fecha,type,target_id,source,objetive)
		VALUES(fecha,'REPLY_TO_COMMENT',responded,NEW.propietario_id,NEW.id);
		
	END IF;

	
END;

/

DELIMITER ;